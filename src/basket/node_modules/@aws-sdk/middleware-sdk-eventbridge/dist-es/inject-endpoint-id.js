import { __awaiter, __generator, __values } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
export var injectEndpointIdMiddleware = function (config) {
    return function (next, context) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var endpointSuffix;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof args.input.EndpointId === "undefined")) return [3, 1];
                        return [3, 4];
                    case 1:
                        if (!config.isCustomEndpoint) return [3, 2];
                        context.signing_region = "*";
                        return [3, 4];
                    case 2: return [4, config.useFipsEndpoint()];
                    case 3:
                        if ((_a.sent()) === true) {
                            throw new Error("FIPS is not supported with EventBridge multi-region endpoints, please check the useFipsEndpoint configuration.");
                        }
                        else if (HttpRequest.isInstance(args.request)) {
                            endpointSuffix = getEndpointSuffix(args.request.hostname);
                            if (!isValidHostnameComponent(args.input.EndpointId)) {
                                throw new Error("The EndpointId is not a valid domain name component, got ".concat(args.input.EndpointId, "."));
                            }
                            args.request.hostname = "".concat(args.input.EndpointId, ".endpoint.events.").concat(endpointSuffix);
                            context.signing_region = "*";
                        }
                        _a.label = 4;
                    case 4: return [2, next(args)];
                }
            });
        }); };
    };
};
var getEndpointSuffix = function (endpoint) {
    var EVENTS_ENDPOINT_PATTERN = /^(.+\.)?events(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    return endpoint.replace(new RegExp(EVENTS_ENDPOINT_PATTERN), "");
};
var isValidHostnameComponent = function (component) {
    var e_1, _a;
    var HOSTNAME_LABEL_PATTERN = /^[a-zA-Z0-9](([a-zA-Z0-9-]+)?[a-zA-Z0-9])?$/;
    try {
        for (var _b = __values(component.split(".")), _c = _b.next(); !_c.done; _c = _b.next()) {
            var label = _c.value;
            if (!HOSTNAME_LABEL_PATTERN.test(label) || label.length > 63) {
                return false;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return true;
};
export var injectEndpointIdMiddlewareOptions = {
    step: "build",
    tags: ["ENDPOINT_ID"],
    name: "injectEndpointIdMiddleware",
    override: true,
};
export var getInjectEndpointIdPlugin = function (options) { return ({
    applyToStack: function (operationStack) {
        operationStack.add(injectEndpointIdMiddleware(options), injectEndpointIdMiddlewareOptions);
    },
}); };
